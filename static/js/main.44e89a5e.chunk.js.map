{"version":3,"sources":["Components/Square.js","App.js","serviceWorker.js","index.js"],"names":["react_default","a","createElement","className","onClick","this","props","changeAppState","value","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","val","arr","state","array","Winner","sqaureList","list","winnerName","flag","push","newFlag","setState","lines","i","length","_lines$i","slicedToArray","b","c","s","renderSqaure","x","Square_default","traceBackFn","res_arr","len","result","res","console","log","splice","Array","fill","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44e89a5e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"button\" onClick={this.props.changeAppState}>\r\n          {this.props.value}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Square from './Components/Square.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      list: Array(9).fill(null),\n      flag: true,\n      winnerName:\"\",\n      array:[]\n      // when flag is true - X will play, else O will play\n    };\n  }\n  handleClick = (e) => {\n    let val = e;\n    let arr = this.state.array;\n    let Winner = \"\";\n    const sqaureList = this.state.list;\n    if (sqaureList[e] === null && this.state.winnerName===\"\") {\n      if (this.state.flag === true) {\n        sqaureList[e] = \"X\";\n        arr.push(val);\n      } else {\n        sqaureList[e] = \"O\";\n        arr.push(val)\n      }\n    }\n    const newFlag = !this.state.flag;\n    this.setState({ list: sqaureList, flag: newFlag, array:arr});\n    //console.log(this.state.list[e]);\n    //console.log(arr);\n      \n      \n\n//check winner\n    \n    const lines = [\n      [0, 1, 2], // indexes of this.state.list array\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    \n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      //   console.log(a, b, c);\n      const s = this.state.list;\n      if (s[a] !== null && s[a] === s[b] && s[a] === s[c] && this.state.winnerName === \"\") {\n        if (this.state.flag === true) {\n          Winner = \"X\";\n          \n        } else {\n          Winner = \"O\";\n          \n        }\n      }\n    }\n    \n    \n    if(Winner===\"X\" || Winner === \"O\"){\n      this.setState({winnerName:Winner });\n      \n    }\n      \n    \n    \n    // console.log(this.state.list);\n    \n    \n  };\n\n  renderSqaure = (x) => {\n    return (\n      <Square\n        value={this.state.list[x]}\n        changeAppState={() => this.handleClick(x)}\n      />\n    );\n  };\n  traceBackFn = () => {\n    let res_arr = this.state.array;\n    let len = res_arr.length\n    let result = res_arr[len-1]\n    let res = this.state.list;\n    console.log(res);\n    console.log(res_arr);\n    res[result]=null;\n    res_arr.splice((len-1),1);\n    console.log(res_arr);\n    console.log(res);\n    const newFlag = !this.state.flag;\n    this.setState({\n      list:res,\n      array:res_arr,\n      winnerName:\"\",\n      flag:newFlag,\n    })\n\n  }\n\n  \n  render() {\n    //console.log(this.state.flag);\n    return (\n      <div className=\"App\">\n        <h1>Trace Back Tic-Tac-Toe</h1>\n        <div>\n        <div className=\"row\">\n          {this.renderSqaure(0)}\n          {this.renderSqaure(1)}\n          {this.renderSqaure(2)}\n        </div>\n        <div className=\"row\">\n          {this.renderSqaure(3)}\n          {this.renderSqaure(4)}\n          {this.renderSqaure(5)}\n        </div>\n        <div className=\"row\">\n          {this.renderSqaure(6)}\n          {this.renderSqaure(7)}\n          {this.renderSqaure(8)}\n        </div>\n        <div>winner is: {this.state.winnerName}</div>\n        <button onClick={this.traceBackFn}>Trace Back</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}